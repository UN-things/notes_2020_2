# It remains to modify the code so that the key is entered by the user 
# and the matrix is generated from the key

# matrix generated by the "LEARN" key
matrix = 	[['L', 'E', 'A', 'R', 'N'],
			['B', 'C', 'D', 'F', 'G'],
			['H', ['I', 'J'], 'K', 'M', 'O'],
			['P', 'Q', 'S', 'T', 'U'],
			['V', 'W', 'X', 'Y', 'Z']]

def get_couples(message, indicator = 0):
	'''
	Create the pairs of letters that will be returned or
	used in the encription algorithm

	Input parameters:
	- message: Encrypted or decrypted message
	- indicator: Indicates the operating mode:
		- 0: Encrypt - default
		- 1: Decrypt
	'''
	if indicator != 0:
		return [message[i:i+2] for i in range(0, len(message), 2)]

	list_couples = list()
	i = 0
	while i < len(message):
		couple = message[i:i+2]
		# if there is only one letter, add 'X'
		if len(couple) == 1:
			couple = couple + 'X'
		# if the two letters of the pair are the same
  		# add an 'X' in the middle
		elif couple[0] == couple[1]:
			couple = couple[0] + 'X'
			i = i - 1
		list_couples.append(couple)
		i = i + 2
	return list_couples

def search_characters(couple):
    '''
	Returns the position of the letter pair, in a coupling list

	Input parameter:
	- couple: two letter string
    '''
	list_positions = list()
	for character in couple:
		# case in which the letter is 'I' or 'J'
		if ((character == 'I') | (character == 'J')):
			list_positions.append((2, 1))
		for row in range(len(matrix)):
			for column in range(len(matrix[row])):
				if matrix[row][column] == character:
					list_positions.append((row, column))
					break
			else: continue
			break
	return list_positions

def playfair(list_couples, indicator = 0):
    '''
	Function that is responsible for replacing the pairs of
 	letters using the matrix

	Input paramenters:
	- list_couples: list containing all letter pairs in the message
	- indicator: Indicates the operating mode:
		- 0: Encrypt - default
		- 1: Decrypt
    '''
	couples_encrypted = list()
	# reverses the replacement move if indicator == 1
	aux = 1 if indicator == 0 else -1
	for couple in list_couples:
		new_couple = str()
		positions = search_characters(couple)
		for i in range(len(positions)):
			row, col = positions[i][0], positions[i][1]
			if positions[0][1] == positions[1][1]:
				row = (positions[i][0] + aux) % len(matrix)
			elif positions[0][0] == positions[1][0]:
				col = (positions[i][1] + aux) % len(matrix)
			else:
				col = positions[(i+aux)%2][1]
			char = '[I/J]' if isinstance(matrix[row][col], list) else matrix[row][col]
			new_couple = new_couple + char
		couples_encrypted.append(new_couple)
	return couples_encrypted

def main():
    '''
    Receive input parameters, [encrypt/decrypt] and print the result
    '''
    print("\n\t1. Encriptar\n\t2. Desencriptar\n")
    option = int(input())
    print("\n\tIngrese el mensaje:\n")
    message = input().replace(' ', '').upper()
    list_couples = get_couples(message, option-1)
    list_result = playfair(list_couples, option-1)
    result = str()
    for couple in list_result: result = result + couple
    print('\n\t',result,'\n')

if __name__ == "__main__":
    main()